-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity unoptimized_conv_3_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    hw_input_stencil_values_V_val_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    hw_input_stencil_values_V_val_V_empty_n : IN STD_LOGIC;
    hw_input_stencil_values_V_val_V_read : OUT STD_LOGIC;
    hw_output_stencil_values_V_val_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    hw_output_stencil_values_V_val_V_full_n : IN STD_LOGIC;
    hw_output_stencil_values_V_val_V_write : OUT STD_LOGIC;
    tlast_values_V_val_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    tlast_values_V_val_V_full_n : IN STD_LOGIC;
    tlast_values_V_val_V_write : OUT STD_LOGIC );
end;


architecture behav of unoptimized_conv_3_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv6_3E : STD_LOGIC_VECTOR (5 downto 0) := "111110";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv16_3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000011";
    constant ap_const_lv16_4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv16_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv16_13 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010011";
    constant ap_const_lv16_15 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal hw_input_stencil_values_V_val_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln392_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal hw_output_stencil_values_V_val_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tlast_values_V_val_V_blk_n : STD_LOGIC;
    signal c3_fu_227_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal c3_reg_541 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln392_fu_241_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln392_reg_546 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln391_fu_221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c5_fu_251_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal c3_1_fu_277_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal c3_1_reg_562 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln142_fu_283_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln142_reg_570 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln394_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c5_1_fu_295_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal c5_1_reg_580 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln395_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal hw_input_global_wrap_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal hw_input_global_wrap_7_reg_593 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln187_fu_326_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln187_reg_604 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal hw_input_global_wrap_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal hw_input_global_wrap_15_reg_625 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_11_fu_368_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal empty_11_reg_631 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_522_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_4_reg_646 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_i231_fu_460_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_i231_reg_661 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln58_fu_465_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_reg_666 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_2_fu_476_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_2_reg_671 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_530_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_5_reg_676 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal hw_input_global_wrap_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal hw_input_global_wrap_ce0 : STD_LOGIC;
    signal hw_input_global_wrap_we0 : STD_LOGIC;
    signal hw_input_global_wrap_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal hw_input_global_wrap_ce1 : STD_LOGIC;
    signal hw_input_global_wrap_1_reg_175 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal hw_input_global_wrap_2_reg_186 : STD_LOGIC_VECTOR (6 downto 0);
    signal hw_output_s0_y_v33_a_reg_197 : STD_LOGIC_VECTOR (5 downto 0);
    signal hw_output_s0_x_v32_a_reg_209 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state11 : BOOLEAN;
    signal zext_ln321_1_fu_266_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln201_fu_309_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln201_3_fu_321_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln201_6_fu_340_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln201_1_fu_352_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln201_4_fu_363_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln201_2_fu_379_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln201_7_fu_390_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln201_5_fu_413_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln201_8_fu_424_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_233_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln321_fu_257_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln321_fu_261_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_3_fu_301_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_6_fu_314_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_9_fu_332_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_4_fu_345_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_7_fu_357_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_5_fu_372_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_s_fu_384_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln40_fu_395_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_fu_407_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1_fu_418_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln38_fu_434_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln38_1_fu_439_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_10_fu_456_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln34_fu_429_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_265_fu_444_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_1_fu_470_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln45_fu_450_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln47_fu_482_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_i_fu_494_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_6_fu_505_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln58_6_fu_505_p2 : signal is "no";
    signal add_ln58_7_fu_510_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln58_7_fu_510_p2 : signal is "no";
    signal add_ln58_3_fu_501_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_522_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_522_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_530_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_530_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);

    component unoptimized_conv_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component unoptimized_conv_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    hw_input_global_wrap_U : component unoptimized_conv_bkb
    generic map (
        DataWidth => 16,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hw_input_global_wrap_address0,
        ce0 => hw_input_global_wrap_ce0,
        we0 => hw_input_global_wrap_we0,
        d0 => hw_input_stencil_values_V_val_V_dout,
        q0 => hw_input_global_wrap_q0,
        address1 => hw_input_global_wrap_address1,
        ce1 => hw_input_global_wrap_ce1,
        q1 => hw_input_global_wrap_q1);

    unoptimized_conv_cud_U6 : component unoptimized_conv_cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_522_p0,
        din1 => hw_input_global_wrap_q0,
        din2 => grp_fu_522_p2,
        dout => grp_fu_522_p3);

    unoptimized_conv_cud_U7 : component unoptimized_conv_cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_530_p0,
        din1 => hw_input_global_wrap_q0,
        din2 => grp_fu_530_p2,
        dout => grp_fu_530_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln394_fu_271_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    hw_input_global_wrap_1_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln392_fu_245_p2 = ap_const_lv1_0) and (hw_input_stencil_values_V_val_V_empty_n = ap_const_logic_0))) and (icmp_ln392_fu_245_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                hw_input_global_wrap_1_reg_175 <= c3_reg_541;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                hw_input_global_wrap_1_reg_175 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    hw_input_global_wrap_2_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln391_fu_221_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                hw_input_global_wrap_2_reg_186 <= ap_const_lv7_0;
            elsif ((not(((icmp_ln392_fu_245_p2 = ap_const_lv1_0) and (hw_input_stencil_values_V_val_V_empty_n = ap_const_logic_0))) and (icmp_ln392_fu_245_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                hw_input_global_wrap_2_reg_186 <= c5_fu_251_p2;
            end if; 
        end if;
    end process;

    hw_output_s0_x_v32_a_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln394_fu_271_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                hw_output_s0_x_v32_a_reg_209 <= ap_const_lv6_0;
            elsif ((not(((tlast_values_V_val_V_full_n = ap_const_logic_0) or (hw_output_stencil_values_V_val_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                hw_output_s0_x_v32_a_reg_209 <= c5_1_reg_580;
            end if; 
        end if;
    end process;

    hw_output_s0_y_v33_a_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln391_fu_221_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                hw_output_s0_y_v33_a_reg_197 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln395_fu_289_p2 = ap_const_lv1_1))) then 
                hw_output_s0_y_v33_a_reg_197 <= c3_1_reg_562;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln394_fu_271_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                add_ln142_reg_570 <= add_ln142_fu_283_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln187_reg_604 <= add_ln187_fu_326_p2;
                hw_input_global_wrap_7_reg_593 <= hw_input_global_wrap_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                    add_ln58_2_reg_671(15 downto 1) <= add_ln58_2_fu_476_p2(15 downto 1);
                add_ln58_reg_666 <= add_ln58_fu_465_p2;
                tmp_i231_reg_661 <= tmp_i231_fu_460_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln58_4_reg_646 <= grp_fu_522_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                add_ln58_5_reg_676 <= grp_fu_530_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                c3_1_reg_562 <= c3_1_fu_277_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                c3_reg_541 <= c3_fu_227_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                c5_1_reg_580 <= c5_1_fu_295_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                empty_11_reg_631 <= empty_11_fu_368_p1;
                hw_input_global_wrap_15_reg_625 <= hw_input_global_wrap_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln391_fu_221_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln392_reg_546(12 downto 6) <= zext_ln392_fu_241_p1(12 downto 6);
            end if;
        end if;
    end process;
    zext_ln392_reg_546(5 downto 0) <= "000000";
    zext_ln392_reg_546(13) <= '0';
    add_ln58_2_reg_671(0) <= '0';

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, hw_input_stencil_values_V_val_V_empty_n, hw_output_stencil_values_V_val_V_full_n, tlast_values_V_val_V_full_n, ap_CS_fsm_state3, icmp_ln392_fu_245_p2, ap_CS_fsm_state11, ap_CS_fsm_state2, icmp_ln391_fu_221_p2, ap_CS_fsm_state4, icmp_ln394_fu_271_p2, ap_CS_fsm_state5, icmp_ln395_fu_289_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln391_fu_221_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((icmp_ln392_fu_245_p2 = ap_const_lv1_0) and (hw_input_stencil_values_V_val_V_empty_n = ap_const_logic_0))) and (icmp_ln392_fu_245_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((icmp_ln392_fu_245_p2 = ap_const_lv1_0) and (hw_input_stencil_values_V_val_V_empty_n = ap_const_logic_0))) and (icmp_ln392_fu_245_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln394_fu_271_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln395_fu_289_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if ((not(((tlast_values_V_val_V_full_n = ap_const_logic_0) or (hw_output_stencil_values_V_val_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    add_ln142_fu_283_p2 <= std_logic_vector(unsigned(hw_output_s0_y_v33_a_reg_197) + unsigned(ap_const_lv6_2));
    add_ln187_fu_326_p2 <= std_logic_vector(unsigned(ap_const_lv6_2) + unsigned(hw_output_s0_x_v32_a_reg_209));
    add_ln321_fu_261_p2 <= std_logic_vector(unsigned(zext_ln392_reg_546) + unsigned(zext_ln321_fu_257_p1));
    add_ln58_1_fu_470_p2 <= std_logic_vector(unsigned(shl_ln34_fu_429_p2) + unsigned(p_265_fu_444_p2));
    add_ln58_2_fu_476_p2 <= std_logic_vector(unsigned(add_ln58_1_fu_470_p2) + unsigned(shl_ln45_fu_450_p2));
    add_ln58_3_fu_501_p2 <= std_logic_vector(unsigned(add_ln58_2_reg_671) + unsigned(add_ln58_reg_666));
    add_ln58_6_fu_505_p2 <= std_logic_vector(signed(add_ln58_5_reg_676) + signed(tmp1_i_fu_494_p3));
    add_ln58_7_fu_510_p2 <= std_logic_vector(unsigned(add_ln58_6_fu_505_p2) + unsigned(add_ln58_4_reg_646));
    add_ln58_fu_465_p2 <= std_logic_vector(signed(hw_input_global_wrap_q0) + signed(hw_input_global_wrap_7_reg_593));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state11_assign_proc : process(hw_output_stencil_values_V_val_V_full_n, tlast_values_V_val_V_full_n)
    begin
                ap_block_state11 <= ((tlast_values_V_val_V_full_n = ap_const_logic_0) or (hw_output_stencil_values_V_val_V_full_n = ap_const_logic_0));
    end process;


    ap_block_state3_assign_proc : process(hw_input_stencil_values_V_val_V_empty_n, icmp_ln392_fu_245_p2)
    begin
                ap_block_state3 <= ((icmp_ln392_fu_245_p2 = ap_const_lv1_0) and (hw_input_stencil_values_V_val_V_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state4, icmp_ln394_fu_271_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln394_fu_271_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    c3_1_fu_277_p2 <= std_logic_vector(unsigned(hw_output_s0_y_v33_a_reg_197) + unsigned(ap_const_lv6_1));
    c3_fu_227_p2 <= std_logic_vector(unsigned(hw_input_global_wrap_1_reg_175) + unsigned(ap_const_lv7_1));
    c5_1_fu_295_p2 <= std_logic_vector(unsigned(hw_output_s0_x_v32_a_reg_209) + unsigned(ap_const_lv6_1));
    c5_fu_251_p2 <= std_logic_vector(unsigned(hw_input_global_wrap_2_reg_186) + unsigned(ap_const_lv7_1));
    empty_10_fu_456_p1 <= hw_input_global_wrap_q1(14 - 1 downto 0);
    empty_11_fu_368_p1 <= hw_input_global_wrap_q0(14 - 1 downto 0);
    grp_fu_522_p0 <= ap_const_lv16_13(6 - 1 downto 0);
    grp_fu_522_p2 <= std_logic_vector(unsigned(shl_ln40_fu_395_p2) - unsigned(hw_input_global_wrap_q1));
    grp_fu_530_p0 <= ap_const_lv16_15(6 - 1 downto 0);
    grp_fu_530_p2 <= std_logic_vector(unsigned(shl_ln47_fu_482_p2) - unsigned(hw_input_global_wrap_q1));

    hw_input_global_wrap_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, zext_ln321_1_fu_266_p1, zext_ln201_fu_309_p1, zext_ln201_3_fu_321_p1, zext_ln201_4_fu_363_p1, zext_ln201_2_fu_379_p1, zext_ln201_5_fu_413_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            hw_input_global_wrap_address0 <= zext_ln201_5_fu_413_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            hw_input_global_wrap_address0 <= zext_ln201_2_fu_379_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            hw_input_global_wrap_address0 <= zext_ln201_4_fu_363_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            hw_input_global_wrap_address0 <= zext_ln201_3_fu_321_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            hw_input_global_wrap_address0 <= zext_ln201_fu_309_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            hw_input_global_wrap_address0 <= zext_ln321_1_fu_266_p1(12 - 1 downto 0);
        else 
            hw_input_global_wrap_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    hw_input_global_wrap_address1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, zext_ln201_6_fu_340_p1, zext_ln201_1_fu_352_p1, zext_ln201_7_fu_390_p1, zext_ln201_8_fu_424_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            hw_input_global_wrap_address1 <= zext_ln201_8_fu_424_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            hw_input_global_wrap_address1 <= zext_ln201_7_fu_390_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            hw_input_global_wrap_address1 <= zext_ln201_1_fu_352_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            hw_input_global_wrap_address1 <= zext_ln201_6_fu_340_p1(12 - 1 downto 0);
        else 
            hw_input_global_wrap_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    hw_input_global_wrap_ce0_assign_proc : process(hw_input_stencil_values_V_val_V_empty_n, ap_CS_fsm_state3, icmp_ln392_fu_245_p2, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (not(((icmp_ln392_fu_245_p2 = ap_const_lv1_0) and (hw_input_stencil_values_V_val_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            hw_input_global_wrap_ce0 <= ap_const_logic_1;
        else 
            hw_input_global_wrap_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    hw_input_global_wrap_ce1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            hw_input_global_wrap_ce1 <= ap_const_logic_1;
        else 
            hw_input_global_wrap_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    hw_input_global_wrap_we0_assign_proc : process(hw_input_stencil_values_V_val_V_empty_n, ap_CS_fsm_state3, icmp_ln392_fu_245_p2)
    begin
        if ((not(((icmp_ln392_fu_245_p2 = ap_const_lv1_0) and (hw_input_stencil_values_V_val_V_empty_n = ap_const_logic_0))) and (icmp_ln392_fu_245_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            hw_input_global_wrap_we0 <= ap_const_logic_1;
        else 
            hw_input_global_wrap_we0 <= ap_const_logic_0;
        end if; 
    end process;


    hw_input_stencil_values_V_val_V_blk_n_assign_proc : process(hw_input_stencil_values_V_val_V_empty_n, ap_CS_fsm_state3, icmp_ln392_fu_245_p2)
    begin
        if (((icmp_ln392_fu_245_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            hw_input_stencil_values_V_val_V_blk_n <= hw_input_stencil_values_V_val_V_empty_n;
        else 
            hw_input_stencil_values_V_val_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    hw_input_stencil_values_V_val_V_read_assign_proc : process(hw_input_stencil_values_V_val_V_empty_n, ap_CS_fsm_state3, icmp_ln392_fu_245_p2)
    begin
        if ((not(((icmp_ln392_fu_245_p2 = ap_const_lv1_0) and (hw_input_stencil_values_V_val_V_empty_n = ap_const_logic_0))) and (icmp_ln392_fu_245_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            hw_input_stencil_values_V_val_V_read <= ap_const_logic_1;
        else 
            hw_input_stencil_values_V_val_V_read <= ap_const_logic_0;
        end if; 
    end process;


    hw_output_stencil_values_V_val_V_blk_n_assign_proc : process(hw_output_stencil_values_V_val_V_full_n, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            hw_output_stencil_values_V_val_V_blk_n <= hw_output_stencil_values_V_val_V_full_n;
        else 
            hw_output_stencil_values_V_val_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    hw_output_stencil_values_V_val_V_din <= std_logic_vector(unsigned(add_ln58_7_fu_510_p2) + unsigned(add_ln58_3_fu_501_p2));

    hw_output_stencil_values_V_val_V_write_assign_proc : process(hw_output_stencil_values_V_val_V_full_n, tlast_values_V_val_V_full_n, ap_CS_fsm_state11)
    begin
        if ((not(((tlast_values_V_val_V_full_n = ap_const_logic_0) or (hw_output_stencil_values_V_val_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            hw_output_stencil_values_V_val_V_write <= ap_const_logic_1;
        else 
            hw_output_stencil_values_V_val_V_write <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln391_fu_221_p2 <= "1" when (hw_input_global_wrap_1_reg_175 = ap_const_lv7_40) else "0";
    icmp_ln392_fu_245_p2 <= "1" when (hw_input_global_wrap_2_reg_186 = ap_const_lv7_40) else "0";
    icmp_ln394_fu_271_p2 <= "1" when (hw_output_s0_y_v33_a_reg_197 = ap_const_lv6_3E) else "0";
    icmp_ln395_fu_289_p2 <= "1" when (hw_output_s0_x_v32_a_reg_209 = ap_const_lv6_3E) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state4, icmp_ln394_fu_271_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln394_fu_271_p2 = ap_const_lv1_1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    p_265_fu_444_p2 <= std_logic_vector(unsigned(shl_ln38_fu_434_p2) - unsigned(shl_ln38_1_fu_439_p2));

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    shl_ln34_fu_429_p2 <= std_logic_vector(shift_left(unsigned(hw_input_global_wrap_7_reg_593),to_integer(unsigned('0' & ap_const_lv16_4(16-1 downto 0)))));
    shl_ln38_1_fu_439_p2 <= std_logic_vector(shift_left(unsigned(hw_input_global_wrap_15_reg_625),to_integer(unsigned('0' & ap_const_lv16_1(16-1 downto 0)))));
    shl_ln38_fu_434_p2 <= std_logic_vector(shift_left(unsigned(hw_input_global_wrap_15_reg_625),to_integer(unsigned('0' & ap_const_lv16_3(16-1 downto 0)))));
    shl_ln40_fu_395_p2 <= std_logic_vector(shift_left(unsigned(hw_input_global_wrap_q1),to_integer(unsigned('0' & ap_const_lv16_3(16-1 downto 0)))));
    shl_ln45_fu_450_p2 <= std_logic_vector(shift_left(unsigned(hw_input_global_wrap_q0),to_integer(unsigned('0' & ap_const_lv16_2(16-1 downto 0)))));
    shl_ln47_fu_482_p2 <= std_logic_vector(shift_left(unsigned(hw_input_global_wrap_q1),to_integer(unsigned('0' & ap_const_lv16_4(16-1 downto 0)))));
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;


    tlast_values_V_val_V_blk_n_assign_proc : process(tlast_values_V_val_V_full_n, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            tlast_values_V_val_V_blk_n <= tlast_values_V_val_V_full_n;
        else 
            tlast_values_V_val_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    tlast_values_V_val_V_din <= ap_const_lv1_0;

    tlast_values_V_val_V_write_assign_proc : process(hw_output_stencil_values_V_val_V_full_n, tlast_values_V_val_V_full_n, ap_CS_fsm_state11)
    begin
        if ((not(((tlast_values_V_val_V_full_n = ap_const_logic_0) or (hw_output_stencil_values_V_val_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            tlast_values_V_val_V_write <= ap_const_logic_1;
        else 
            tlast_values_V_val_V_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_i_fu_494_p3 <= (tmp_i231_reg_661 & ap_const_lv2_0);
    tmp_1_fu_418_p3 <= (add_ln142_reg_570 & add_ln187_reg_604);
    tmp_2_fu_233_p3 <= (hw_input_global_wrap_1_reg_175 & ap_const_lv6_0);
    tmp_3_fu_301_p3 <= (hw_output_s0_y_v33_a_reg_197 & hw_output_s0_x_v32_a_reg_209);
    tmp_4_fu_345_p3 <= (c3_1_reg_562 & hw_output_s0_x_v32_a_reg_209);
    tmp_5_fu_372_p3 <= (add_ln142_reg_570 & hw_output_s0_x_v32_a_reg_209);
    tmp_6_fu_314_p3 <= (hw_output_s0_y_v33_a_reg_197 & c5_1_reg_580);
    tmp_7_fu_357_p3 <= (c3_1_reg_562 & c5_1_reg_580);
    tmp_8_fu_407_p3 <= (add_ln142_reg_570 & c5_1_reg_580);
    tmp_9_fu_332_p3 <= (hw_output_s0_y_v33_a_reg_197 & add_ln187_fu_326_p2);
    tmp_i231_fu_460_p2 <= std_logic_vector(unsigned(empty_10_fu_456_p1) + unsigned(empty_11_reg_631));
    tmp_s_fu_384_p3 <= (c3_1_reg_562 & add_ln187_reg_604);
    zext_ln201_1_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_345_p3),64));
    zext_ln201_2_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_372_p3),64));
    zext_ln201_3_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_314_p3),64));
    zext_ln201_4_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_357_p3),64));
    zext_ln201_5_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_407_p3),64));
    zext_ln201_6_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_332_p3),64));
    zext_ln201_7_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_384_p3),64));
    zext_ln201_8_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_418_p3),64));
    zext_ln201_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_301_p3),64));
    zext_ln321_1_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_fu_261_p2),64));
    zext_ln321_fu_257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(hw_input_global_wrap_2_reg_186),14));
    zext_ln392_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_233_p3),14));
end behav;
