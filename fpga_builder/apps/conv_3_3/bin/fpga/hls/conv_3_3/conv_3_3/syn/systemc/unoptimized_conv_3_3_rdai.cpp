// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "unoptimized_conv_3_3_rdai.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_lv<16> unoptimized_conv_3_3_rdai::ap_const_lv16_0 = "0000000000000000";
const sc_lv<1> unoptimized_conv_3_3_rdai::ap_const_lv1_0 = "0";
const sc_logic unoptimized_conv_3_3_rdai::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic unoptimized_conv_3_3_rdai::ap_const_logic_0 = sc_dt::Log_0;

unoptimized_conv_3_3_rdai::unoptimized_conv_3_3_rdai(sc_module_name name) : sc_module(name), mVcdFile(0) {
    Block_proc75_U0 = new Block_proc75("Block_proc75_U0");
    Block_proc75_U0->ap_clk(ap_clk);
    Block_proc75_U0->ap_rst(ap_rst_n_inv);
    Block_proc75_U0->ap_start(Block_proc75_U0_ap_start);
    Block_proc75_U0->ap_done(Block_proc75_U0_ap_done);
    Block_proc75_U0->ap_continue(Block_proc75_U0_ap_continue);
    Block_proc75_U0->ap_idle(Block_proc75_U0_ap_idle);
    Block_proc75_U0->ap_ready(Block_proc75_U0_ap_ready);
    Block_proc75_U0->arg_in0_TDATA(arg_in0_TDATA);
    Block_proc75_U0->arg_in0_TVALID(arg_in0_TVALID);
    Block_proc75_U0->arg_in0_TREADY(Block_proc75_U0_arg_in0_TREADY);
    Block_proc75_U0->arg_in0_TLAST(arg_in0_TLAST);
    Block_proc75_U0->ap_return(Block_proc75_U0_ap_return);
    write_U0 = new write_r("write_U0");
    write_U0->ap_clk(ap_clk);
    write_U0->ap_rst(ap_rst_n_inv);
    write_U0->ap_start(write_U0_ap_start);
    write_U0->start_full_n(start_for_unoptimized_conv_3_3_U0_full_n);
    write_U0->ap_done(write_U0_ap_done);
    write_U0->ap_continue(write_U0_ap_continue);
    write_U0->ap_idle(write_U0_ap_idle);
    write_U0->ap_ready(write_U0_ap_ready);
    write_U0->start_out(write_U0_start_out);
    write_U0->start_write(write_U0_start_write);
    write_U0->HWStream_hw_uint_16_values_V_val_V_din(write_U0_HWStream_hw_uint_16_values_V_val_V_din);
    write_U0->HWStream_hw_uint_16_values_V_val_V_full_n(arg_in0_hwstream_val_full_n);
    write_U0->HWStream_hw_uint_16_values_V_val_V_write(write_U0_HWStream_hw_uint_16_values_V_val_V_write);
    write_U0->v_val_V_read(this_assign_channel_dout);
    unoptimized_conv_3_3_U0 = new unoptimized_conv_3_3("unoptimized_conv_3_3_U0");
    unoptimized_conv_3_3_U0->ap_clk(ap_clk);
    unoptimized_conv_3_3_U0->ap_rst(ap_rst_n_inv);
    unoptimized_conv_3_3_U0->ap_start(unoptimized_conv_3_3_U0_ap_start);
    unoptimized_conv_3_3_U0->start_full_n(unoptimized_conv_3_3_U0_start_full_n);
    unoptimized_conv_3_3_U0->ap_done(unoptimized_conv_3_3_U0_ap_done);
    unoptimized_conv_3_3_U0->ap_continue(unoptimized_conv_3_3_U0_ap_continue);
    unoptimized_conv_3_3_U0->ap_idle(unoptimized_conv_3_3_U0_ap_idle);
    unoptimized_conv_3_3_U0->ap_ready(unoptimized_conv_3_3_U0_ap_ready);
    unoptimized_conv_3_3_U0->start_out(unoptimized_conv_3_3_U0_start_out);
    unoptimized_conv_3_3_U0->start_write(unoptimized_conv_3_3_U0_start_write);
    unoptimized_conv_3_3_U0->hw_input_stencil_values_V_val_V_dout(arg_in0_hwstream_val_dout);
    unoptimized_conv_3_3_U0->hw_input_stencil_values_V_val_V_empty_n(arg_in0_hwstream_val_empty_n);
    unoptimized_conv_3_3_U0->hw_input_stencil_values_V_val_V_read(unoptimized_conv_3_3_U0_hw_input_stencil_values_V_val_V_read);
    unoptimized_conv_3_3_U0->hw_output_stencil_values_V_val_V_din(unoptimized_conv_3_3_U0_hw_output_stencil_values_V_val_V_din);
    unoptimized_conv_3_3_U0->hw_output_stencil_values_V_val_V_full_n(arg_out_data_values_s_full_n);
    unoptimized_conv_3_3_U0->hw_output_stencil_values_V_val_V_write(unoptimized_conv_3_3_U0_hw_output_stencil_values_V_val_V_write);
    unoptimized_conv_3_3_U0->tlast_values_V_val_V_din(unoptimized_conv_3_3_U0_tlast_values_V_val_V_din);
    unoptimized_conv_3_3_U0->tlast_values_V_val_V_full_n(arg_out_tlast_values_full_n);
    unoptimized_conv_3_3_U0->tlast_values_V_val_V_write(unoptimized_conv_3_3_U0_tlast_values_V_val_V_write);
    read_1_U0 = new read_1("read_1_U0");
    read_1_U0->ap_clk(ap_clk);
    read_1_U0->ap_rst(ap_rst_n_inv);
    read_1_U0->ap_start(read_1_U0_ap_start);
    read_1_U0->ap_done(read_1_U0_ap_done);
    read_1_U0->ap_continue(read_1_U0_ap_continue);
    read_1_U0->ap_idle(read_1_U0_ap_idle);
    read_1_U0->ap_ready(read_1_U0_ap_ready);
    read_1_U0->HWStream_hw_uint_16_values_V_val_V_dout(arg_out_data_values_s_dout);
    read_1_U0->HWStream_hw_uint_16_values_V_val_V_empty_n(arg_out_data_values_s_empty_n);
    read_1_U0->HWStream_hw_uint_16_values_V_val_V_read(read_1_U0_HWStream_hw_uint_16_values_V_val_V_read);
    read_1_U0->ap_return(read_1_U0_ap_return);
    operator_int_1_U0 = new operator_int_1("operator_int_1_U0");
    operator_int_1_U0->ap_clk(ap_clk);
    operator_int_1_U0->ap_rst(ap_rst_n_inv);
    operator_int_1_U0->ap_start(operator_int_1_U0_ap_start);
    operator_int_1_U0->ap_done(operator_int_1_U0_ap_done);
    operator_int_1_U0->ap_continue(operator_int_1_U0_ap_continue);
    operator_int_1_U0->ap_idle(operator_int_1_U0_ap_idle);
    operator_int_1_U0->ap_ready(operator_int_1_U0_ap_ready);
    operator_int_1_U0->hw_uint_16_val_V(operator_int_1_U0_hw_uint_16_val_V);
    operator_int_1_U0->hw_uint_16_val_V_ap_vld(operator_int_1_U0_hw_uint_16_val_V_ap_vld);
    operator_int_1_U0->p_read(p_0_dout);
    read_U0 = new read_r("read_U0");
    read_U0->ap_clk(ap_clk);
    read_U0->ap_rst(ap_rst_n_inv);
    read_U0->ap_start(read_U0_ap_start);
    read_U0->ap_done(read_U0_ap_done);
    read_U0->ap_continue(read_U0_ap_continue);
    read_U0->ap_idle(read_U0_ap_idle);
    read_U0->ap_ready(read_U0_ap_ready);
    read_U0->HWStream_hw_uint_1_values_V_val_V_dout(arg_out_tlast_values_dout);
    read_U0->HWStream_hw_uint_1_values_V_val_V_empty_n(arg_out_tlast_values_empty_n);
    read_U0->HWStream_hw_uint_1_values_V_val_V_read(read_U0_HWStream_hw_uint_1_values_V_val_V_read);
    read_U0->ap_return(read_U0_ap_return);
    operator_int_U0 = new operator_int("operator_int_U0");
    operator_int_U0->ap_clk(ap_clk);
    operator_int_U0->ap_rst(ap_rst_n_inv);
    operator_int_U0->ap_start(operator_int_U0_ap_start);
    operator_int_U0->ap_done(operator_int_U0_ap_done);
    operator_int_U0->ap_continue(operator_int_U0_ap_continue);
    operator_int_U0->ap_idle(operator_int_U0_ap_idle);
    operator_int_U0->ap_ready(operator_int_U0_ap_ready);
    operator_int_U0->hw_uint_1_val_V(operator_int_U0_hw_uint_1_val_V);
    operator_int_U0->hw_uint_1_val_V_ap_vld(operator_int_U0_hw_uint_1_val_V_ap_vld);
    operator_int_U0->p_read(p_s_dout);
    Block_proc7476_U0 = new Block_proc7476("Block_proc7476_U0");
    Block_proc7476_U0->ap_clk(ap_clk);
    Block_proc7476_U0->ap_rst(ap_rst_n_inv);
    Block_proc7476_U0->ap_start(Block_proc7476_U0_ap_start);
    Block_proc7476_U0->ap_done(Block_proc7476_U0_ap_done);
    Block_proc7476_U0->ap_continue(Block_proc7476_U0_ap_continue);
    Block_proc7476_U0->ap_idle(Block_proc7476_U0_ap_idle);
    Block_proc7476_U0->ap_ready(Block_proc7476_U0_ap_ready);
    Block_proc7476_U0->val_assign(val_assign_channel_dout);
    Block_proc7476_U0->val_assign_1(val_assign_1_channel_dout);
    Block_proc7476_U0->arg_out_TDATA(Block_proc7476_U0_arg_out_TDATA);
    Block_proc7476_U0->arg_out_TVALID(Block_proc7476_U0_arg_out_TVALID);
    Block_proc7476_U0->arg_out_TREADY(arg_out_TREADY);
    Block_proc7476_U0->arg_out_TLAST(Block_proc7476_U0_arg_out_TLAST);
    this_assign_channel_U = new fifo_w16_d2_A("this_assign_channel_U");
    this_assign_channel_U->clk(ap_clk);
    this_assign_channel_U->reset(ap_rst_n_inv);
    this_assign_channel_U->if_read_ce(ap_var_for_const0);
    this_assign_channel_U->if_write_ce(ap_var_for_const0);
    this_assign_channel_U->if_din(Block_proc75_U0_ap_return);
    this_assign_channel_U->if_full_n(this_assign_channel_full_n);
    this_assign_channel_U->if_write(Block_proc75_U0_ap_done);
    this_assign_channel_U->if_dout(this_assign_channel_dout);
    this_assign_channel_U->if_empty_n(this_assign_channel_empty_n);
    this_assign_channel_U->if_read(write_U0_ap_ready);
    arg_in0_hwstream_val_U = new fifo_w16_d2_A("arg_in0_hwstream_val_U");
    arg_in0_hwstream_val_U->clk(ap_clk);
    arg_in0_hwstream_val_U->reset(ap_rst_n_inv);
    arg_in0_hwstream_val_U->if_read_ce(ap_var_for_const0);
    arg_in0_hwstream_val_U->if_write_ce(ap_var_for_const0);
    arg_in0_hwstream_val_U->if_din(write_U0_HWStream_hw_uint_16_values_V_val_V_din);
    arg_in0_hwstream_val_U->if_full_n(arg_in0_hwstream_val_full_n);
    arg_in0_hwstream_val_U->if_write(write_U0_HWStream_hw_uint_16_values_V_val_V_write);
    arg_in0_hwstream_val_U->if_dout(arg_in0_hwstream_val_dout);
    arg_in0_hwstream_val_U->if_empty_n(arg_in0_hwstream_val_empty_n);
    arg_in0_hwstream_val_U->if_read(unoptimized_conv_3_3_U0_hw_input_stencil_values_V_val_V_read);
    arg_out_data_values_s_U = new fifo_w16_d2_A("arg_out_data_values_s_U");
    arg_out_data_values_s_U->clk(ap_clk);
    arg_out_data_values_s_U->reset(ap_rst_n_inv);
    arg_out_data_values_s_U->if_read_ce(ap_var_for_const0);
    arg_out_data_values_s_U->if_write_ce(ap_var_for_const0);
    arg_out_data_values_s_U->if_din(unoptimized_conv_3_3_U0_hw_output_stencil_values_V_val_V_din);
    arg_out_data_values_s_U->if_full_n(arg_out_data_values_s_full_n);
    arg_out_data_values_s_U->if_write(unoptimized_conv_3_3_U0_hw_output_stencil_values_V_val_V_write);
    arg_out_data_values_s_U->if_dout(arg_out_data_values_s_dout);
    arg_out_data_values_s_U->if_empty_n(arg_out_data_values_s_empty_n);
    arg_out_data_values_s_U->if_read(read_1_U0_HWStream_hw_uint_16_values_V_val_V_read);
    arg_out_tlast_values_U = new fifo_w1_d2_A("arg_out_tlast_values_U");
    arg_out_tlast_values_U->clk(ap_clk);
    arg_out_tlast_values_U->reset(ap_rst_n_inv);
    arg_out_tlast_values_U->if_read_ce(ap_var_for_const0);
    arg_out_tlast_values_U->if_write_ce(ap_var_for_const0);
    arg_out_tlast_values_U->if_din(unoptimized_conv_3_3_U0_tlast_values_V_val_V_din);
    arg_out_tlast_values_U->if_full_n(arg_out_tlast_values_full_n);
    arg_out_tlast_values_U->if_write(unoptimized_conv_3_3_U0_tlast_values_V_val_V_write);
    arg_out_tlast_values_U->if_dout(arg_out_tlast_values_dout);
    arg_out_tlast_values_U->if_empty_n(arg_out_tlast_values_empty_n);
    arg_out_tlast_values_U->if_read(read_U0_HWStream_hw_uint_1_values_V_val_V_read);
    p_0_U = new fifo_w16_d2_A("p_0_U");
    p_0_U->clk(ap_clk);
    p_0_U->reset(ap_rst_n_inv);
    p_0_U->if_read_ce(ap_var_for_const0);
    p_0_U->if_write_ce(ap_var_for_const0);
    p_0_U->if_din(read_1_U0_ap_return);
    p_0_U->if_full_n(p_0_full_n);
    p_0_U->if_write(read_1_U0_ap_done);
    p_0_U->if_dout(p_0_dout);
    p_0_U->if_empty_n(p_0_empty_n);
    p_0_U->if_read(operator_int_1_U0_ap_ready);
    val_assign_channel_U = new fifo_w16_d2_A("val_assign_channel_U");
    val_assign_channel_U->clk(ap_clk);
    val_assign_channel_U->reset(ap_rst_n_inv);
    val_assign_channel_U->if_read_ce(ap_var_for_const0);
    val_assign_channel_U->if_write_ce(ap_var_for_const0);
    val_assign_channel_U->if_din(operator_int_1_U0_hw_uint_16_val_V);
    val_assign_channel_U->if_full_n(val_assign_channel_full_n);
    val_assign_channel_U->if_write(operator_int_1_U0_ap_done);
    val_assign_channel_U->if_dout(val_assign_channel_dout);
    val_assign_channel_U->if_empty_n(val_assign_channel_empty_n);
    val_assign_channel_U->if_read(Block_proc7476_U0_ap_ready);
    p_s_U = new fifo_w1_d2_A("p_s_U");
    p_s_U->clk(ap_clk);
    p_s_U->reset(ap_rst_n_inv);
    p_s_U->if_read_ce(ap_var_for_const0);
    p_s_U->if_write_ce(ap_var_for_const0);
    p_s_U->if_din(read_U0_ap_return);
    p_s_U->if_full_n(p_s_full_n);
    p_s_U->if_write(read_U0_ap_done);
    p_s_U->if_dout(p_s_dout);
    p_s_U->if_empty_n(p_s_empty_n);
    p_s_U->if_read(operator_int_U0_ap_ready);
    val_assign_1_channel_U = new fifo_w1_d2_A("val_assign_1_channel_U");
    val_assign_1_channel_U->clk(ap_clk);
    val_assign_1_channel_U->reset(ap_rst_n_inv);
    val_assign_1_channel_U->if_read_ce(ap_var_for_const0);
    val_assign_1_channel_U->if_write_ce(ap_var_for_const0);
    val_assign_1_channel_U->if_din(operator_int_U0_hw_uint_1_val_V);
    val_assign_1_channel_U->if_full_n(val_assign_1_channel_full_n);
    val_assign_1_channel_U->if_write(operator_int_U0_ap_done);
    val_assign_1_channel_U->if_dout(val_assign_1_channel_dout);
    val_assign_1_channel_U->if_empty_n(val_assign_1_channel_empty_n);
    val_assign_1_channel_U->if_read(Block_proc7476_U0_ap_ready);
    start_for_unoptimdEe_U = new start_for_unoptimdEe("start_for_unoptimdEe_U");
    start_for_unoptimdEe_U->clk(ap_clk);
    start_for_unoptimdEe_U->reset(ap_rst_n_inv);
    start_for_unoptimdEe_U->if_read_ce(ap_var_for_const0);
    start_for_unoptimdEe_U->if_write_ce(ap_var_for_const0);
    start_for_unoptimdEe_U->if_din(start_for_unoptimized_conv_3_3_U0_din);
    start_for_unoptimdEe_U->if_full_n(start_for_unoptimized_conv_3_3_U0_full_n);
    start_for_unoptimdEe_U->if_write(write_U0_start_write);
    start_for_unoptimdEe_U->if_dout(start_for_unoptimized_conv_3_3_U0_dout);
    start_for_unoptimdEe_U->if_empty_n(start_for_unoptimized_conv_3_3_U0_empty_n);
    start_for_unoptimdEe_U->if_read(unoptimized_conv_3_3_U0_ap_ready);
    start_for_read_1_U0_U = new start_for_read_1_U0("start_for_read_1_U0_U");
    start_for_read_1_U0_U->clk(ap_clk);
    start_for_read_1_U0_U->reset(ap_rst_n_inv);
    start_for_read_1_U0_U->if_read_ce(ap_var_for_const0);
    start_for_read_1_U0_U->if_write_ce(ap_var_for_const0);
    start_for_read_1_U0_U->if_din(start_for_read_1_U0_din);
    start_for_read_1_U0_U->if_full_n(start_for_read_1_U0_full_n);
    start_for_read_1_U0_U->if_write(unoptimized_conv_3_3_U0_start_write);
    start_for_read_1_U0_U->if_dout(start_for_read_1_U0_dout);
    start_for_read_1_U0_U->if_empty_n(start_for_read_1_U0_empty_n);
    start_for_read_1_U0_U->if_read(read_1_U0_ap_ready);
    start_for_read_U0_U = new start_for_read_U0("start_for_read_U0_U");
    start_for_read_U0_U->clk(ap_clk);
    start_for_read_U0_U->reset(ap_rst_n_inv);
    start_for_read_U0_U->if_read_ce(ap_var_for_const0);
    start_for_read_U0_U->if_write_ce(ap_var_for_const0);
    start_for_read_U0_U->if_din(start_for_read_U0_din);
    start_for_read_U0_U->if_full_n(start_for_read_U0_full_n);
    start_for_read_U0_U->if_write(unoptimized_conv_3_3_U0_start_write);
    start_for_read_U0_U->if_dout(start_for_read_U0_dout);
    start_for_read_U0_U->if_empty_n(start_for_read_U0_empty_n);
    start_for_read_U0_U->if_read(read_U0_ap_ready);

    SC_METHOD(thread_Block_proc7476_U0_ap_continue);

    SC_METHOD(thread_Block_proc7476_U0_ap_start);
    sensitive << ( val_assign_channel_empty_n );
    sensitive << ( val_assign_1_channel_empty_n );

    SC_METHOD(thread_Block_proc7476_U0_start_full_n);

    SC_METHOD(thread_Block_proc7476_U0_start_write);

    SC_METHOD(thread_Block_proc75_U0_ap_continue);
    sensitive << ( this_assign_channel_full_n );

    SC_METHOD(thread_Block_proc75_U0_ap_start);

    SC_METHOD(thread_Block_proc75_U0_start_full_n);

    SC_METHOD(thread_Block_proc75_U0_start_write);

    SC_METHOD(thread_ap_channel_done_p_0);
    sensitive << ( read_1_U0_ap_done );

    SC_METHOD(thread_ap_channel_done_p_s);
    sensitive << ( read_U0_ap_done );

    SC_METHOD(thread_ap_channel_done_this_assign_channel);
    sensitive << ( Block_proc75_U0_ap_done );

    SC_METHOD(thread_ap_channel_done_val_assign_1_channel);
    sensitive << ( operator_int_U0_ap_done );

    SC_METHOD(thread_ap_channel_done_val_assign_channel);
    sensitive << ( operator_int_1_U0_ap_done );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sync_continue);

    SC_METHOD(thread_arg_in0_TREADY);
    sensitive << ( Block_proc75_U0_arg_in0_TREADY );

    SC_METHOD(thread_arg_out_TDATA);
    sensitive << ( Block_proc7476_U0_arg_out_TDATA );

    SC_METHOD(thread_arg_out_TLAST);
    sensitive << ( Block_proc7476_U0_arg_out_TLAST );

    SC_METHOD(thread_arg_out_TVALID);
    sensitive << ( Block_proc7476_U0_arg_out_TVALID );

    SC_METHOD(thread_operator_int_1_U0_ap_continue);
    sensitive << ( val_assign_channel_full_n );

    SC_METHOD(thread_operator_int_1_U0_ap_start);
    sensitive << ( p_0_empty_n );

    SC_METHOD(thread_operator_int_1_U0_start_full_n);

    SC_METHOD(thread_operator_int_1_U0_start_write);

    SC_METHOD(thread_operator_int_U0_ap_continue);
    sensitive << ( val_assign_1_channel_full_n );

    SC_METHOD(thread_operator_int_U0_ap_start);
    sensitive << ( p_s_empty_n );

    SC_METHOD(thread_operator_int_U0_start_full_n);

    SC_METHOD(thread_operator_int_U0_start_write);

    SC_METHOD(thread_read_1_U0_ap_continue);
    sensitive << ( p_0_full_n );

    SC_METHOD(thread_read_1_U0_ap_start);
    sensitive << ( start_for_read_1_U0_empty_n );

    SC_METHOD(thread_read_1_U0_start_full_n);

    SC_METHOD(thread_read_1_U0_start_write);

    SC_METHOD(thread_read_U0_ap_continue);
    sensitive << ( p_s_full_n );

    SC_METHOD(thread_read_U0_ap_start);
    sensitive << ( start_for_read_U0_empty_n );

    SC_METHOD(thread_read_U0_start_full_n);

    SC_METHOD(thread_read_U0_start_write);

    SC_METHOD(thread_start_for_read_1_U0_din);

    SC_METHOD(thread_start_for_read_U0_din);

    SC_METHOD(thread_start_for_unoptimized_conv_3_3_U0_din);

    SC_METHOD(thread_unoptimized_conv_3_3_U0_ap_continue);

    SC_METHOD(thread_unoptimized_conv_3_3_U0_ap_start);
    sensitive << ( start_for_unoptimized_conv_3_3_U0_empty_n );

    SC_METHOD(thread_unoptimized_conv_3_3_U0_start_full_n);
    sensitive << ( start_for_read_1_U0_full_n );
    sensitive << ( start_for_read_U0_full_n );

    SC_METHOD(thread_write_U0_ap_continue);

    SC_METHOD(thread_write_U0_ap_start);
    sensitive << ( this_assign_channel_empty_n );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "unoptimized_conv_3_3_rdai_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, arg_in0_TDATA, "(port)arg_in0_TDATA");
    sc_trace(mVcdFile, arg_in0_TLAST, "(port)arg_in0_TLAST");
    sc_trace(mVcdFile, arg_out_TDATA, "(port)arg_out_TDATA");
    sc_trace(mVcdFile, arg_out_TLAST, "(port)arg_out_TLAST");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, arg_in0_TVALID, "(port)arg_in0_TVALID");
    sc_trace(mVcdFile, arg_in0_TREADY, "(port)arg_in0_TREADY");
    sc_trace(mVcdFile, arg_out_TVALID, "(port)arg_out_TVALID");
    sc_trace(mVcdFile, arg_out_TREADY, "(port)arg_out_TREADY");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, Block_proc75_U0_ap_start, "Block_proc75_U0_ap_start");
    sc_trace(mVcdFile, Block_proc75_U0_ap_done, "Block_proc75_U0_ap_done");
    sc_trace(mVcdFile, Block_proc75_U0_ap_continue, "Block_proc75_U0_ap_continue");
    sc_trace(mVcdFile, Block_proc75_U0_ap_idle, "Block_proc75_U0_ap_idle");
    sc_trace(mVcdFile, Block_proc75_U0_ap_ready, "Block_proc75_U0_ap_ready");
    sc_trace(mVcdFile, Block_proc75_U0_arg_in0_TREADY, "Block_proc75_U0_arg_in0_TREADY");
    sc_trace(mVcdFile, Block_proc75_U0_ap_return, "Block_proc75_U0_ap_return");
    sc_trace(mVcdFile, ap_channel_done_this_assign_channel, "ap_channel_done_this_assign_channel");
    sc_trace(mVcdFile, this_assign_channel_full_n, "this_assign_channel_full_n");
    sc_trace(mVcdFile, write_U0_ap_start, "write_U0_ap_start");
    sc_trace(mVcdFile, write_U0_ap_done, "write_U0_ap_done");
    sc_trace(mVcdFile, write_U0_ap_continue, "write_U0_ap_continue");
    sc_trace(mVcdFile, write_U0_ap_idle, "write_U0_ap_idle");
    sc_trace(mVcdFile, write_U0_ap_ready, "write_U0_ap_ready");
    sc_trace(mVcdFile, write_U0_start_out, "write_U0_start_out");
    sc_trace(mVcdFile, write_U0_start_write, "write_U0_start_write");
    sc_trace(mVcdFile, write_U0_HWStream_hw_uint_16_values_V_val_V_din, "write_U0_HWStream_hw_uint_16_values_V_val_V_din");
    sc_trace(mVcdFile, write_U0_HWStream_hw_uint_16_values_V_val_V_write, "write_U0_HWStream_hw_uint_16_values_V_val_V_write");
    sc_trace(mVcdFile, unoptimized_conv_3_3_U0_ap_start, "unoptimized_conv_3_3_U0_ap_start");
    sc_trace(mVcdFile, unoptimized_conv_3_3_U0_start_full_n, "unoptimized_conv_3_3_U0_start_full_n");
    sc_trace(mVcdFile, unoptimized_conv_3_3_U0_ap_done, "unoptimized_conv_3_3_U0_ap_done");
    sc_trace(mVcdFile, unoptimized_conv_3_3_U0_ap_continue, "unoptimized_conv_3_3_U0_ap_continue");
    sc_trace(mVcdFile, unoptimized_conv_3_3_U0_ap_idle, "unoptimized_conv_3_3_U0_ap_idle");
    sc_trace(mVcdFile, unoptimized_conv_3_3_U0_ap_ready, "unoptimized_conv_3_3_U0_ap_ready");
    sc_trace(mVcdFile, unoptimized_conv_3_3_U0_start_out, "unoptimized_conv_3_3_U0_start_out");
    sc_trace(mVcdFile, unoptimized_conv_3_3_U0_start_write, "unoptimized_conv_3_3_U0_start_write");
    sc_trace(mVcdFile, unoptimized_conv_3_3_U0_hw_input_stencil_values_V_val_V_read, "unoptimized_conv_3_3_U0_hw_input_stencil_values_V_val_V_read");
    sc_trace(mVcdFile, unoptimized_conv_3_3_U0_hw_output_stencil_values_V_val_V_din, "unoptimized_conv_3_3_U0_hw_output_stencil_values_V_val_V_din");
    sc_trace(mVcdFile, unoptimized_conv_3_3_U0_hw_output_stencil_values_V_val_V_write, "unoptimized_conv_3_3_U0_hw_output_stencil_values_V_val_V_write");
    sc_trace(mVcdFile, unoptimized_conv_3_3_U0_tlast_values_V_val_V_din, "unoptimized_conv_3_3_U0_tlast_values_V_val_V_din");
    sc_trace(mVcdFile, unoptimized_conv_3_3_U0_tlast_values_V_val_V_write, "unoptimized_conv_3_3_U0_tlast_values_V_val_V_write");
    sc_trace(mVcdFile, read_1_U0_ap_start, "read_1_U0_ap_start");
    sc_trace(mVcdFile, read_1_U0_ap_done, "read_1_U0_ap_done");
    sc_trace(mVcdFile, read_1_U0_ap_continue, "read_1_U0_ap_continue");
    sc_trace(mVcdFile, read_1_U0_ap_idle, "read_1_U0_ap_idle");
    sc_trace(mVcdFile, read_1_U0_ap_ready, "read_1_U0_ap_ready");
    sc_trace(mVcdFile, read_1_U0_HWStream_hw_uint_16_values_V_val_V_read, "read_1_U0_HWStream_hw_uint_16_values_V_val_V_read");
    sc_trace(mVcdFile, read_1_U0_ap_return, "read_1_U0_ap_return");
    sc_trace(mVcdFile, ap_channel_done_p_0, "ap_channel_done_p_0");
    sc_trace(mVcdFile, p_0_full_n, "p_0_full_n");
    sc_trace(mVcdFile, operator_int_1_U0_ap_start, "operator_int_1_U0_ap_start");
    sc_trace(mVcdFile, operator_int_1_U0_ap_done, "operator_int_1_U0_ap_done");
    sc_trace(mVcdFile, operator_int_1_U0_ap_continue, "operator_int_1_U0_ap_continue");
    sc_trace(mVcdFile, operator_int_1_U0_ap_idle, "operator_int_1_U0_ap_idle");
    sc_trace(mVcdFile, operator_int_1_U0_ap_ready, "operator_int_1_U0_ap_ready");
    sc_trace(mVcdFile, operator_int_1_U0_hw_uint_16_val_V, "operator_int_1_U0_hw_uint_16_val_V");
    sc_trace(mVcdFile, operator_int_1_U0_hw_uint_16_val_V_ap_vld, "operator_int_1_U0_hw_uint_16_val_V_ap_vld");
    sc_trace(mVcdFile, ap_channel_done_val_assign_channel, "ap_channel_done_val_assign_channel");
    sc_trace(mVcdFile, val_assign_channel_full_n, "val_assign_channel_full_n");
    sc_trace(mVcdFile, read_U0_ap_start, "read_U0_ap_start");
    sc_trace(mVcdFile, read_U0_ap_done, "read_U0_ap_done");
    sc_trace(mVcdFile, read_U0_ap_continue, "read_U0_ap_continue");
    sc_trace(mVcdFile, read_U0_ap_idle, "read_U0_ap_idle");
    sc_trace(mVcdFile, read_U0_ap_ready, "read_U0_ap_ready");
    sc_trace(mVcdFile, read_U0_HWStream_hw_uint_1_values_V_val_V_read, "read_U0_HWStream_hw_uint_1_values_V_val_V_read");
    sc_trace(mVcdFile, read_U0_ap_return, "read_U0_ap_return");
    sc_trace(mVcdFile, ap_channel_done_p_s, "ap_channel_done_p_s");
    sc_trace(mVcdFile, p_s_full_n, "p_s_full_n");
    sc_trace(mVcdFile, operator_int_U0_ap_start, "operator_int_U0_ap_start");
    sc_trace(mVcdFile, operator_int_U0_ap_done, "operator_int_U0_ap_done");
    sc_trace(mVcdFile, operator_int_U0_ap_continue, "operator_int_U0_ap_continue");
    sc_trace(mVcdFile, operator_int_U0_ap_idle, "operator_int_U0_ap_idle");
    sc_trace(mVcdFile, operator_int_U0_ap_ready, "operator_int_U0_ap_ready");
    sc_trace(mVcdFile, operator_int_U0_hw_uint_1_val_V, "operator_int_U0_hw_uint_1_val_V");
    sc_trace(mVcdFile, operator_int_U0_hw_uint_1_val_V_ap_vld, "operator_int_U0_hw_uint_1_val_V_ap_vld");
    sc_trace(mVcdFile, ap_channel_done_val_assign_1_channel, "ap_channel_done_val_assign_1_channel");
    sc_trace(mVcdFile, val_assign_1_channel_full_n, "val_assign_1_channel_full_n");
    sc_trace(mVcdFile, Block_proc7476_U0_ap_start, "Block_proc7476_U0_ap_start");
    sc_trace(mVcdFile, Block_proc7476_U0_ap_done, "Block_proc7476_U0_ap_done");
    sc_trace(mVcdFile, Block_proc7476_U0_ap_continue, "Block_proc7476_U0_ap_continue");
    sc_trace(mVcdFile, Block_proc7476_U0_ap_idle, "Block_proc7476_U0_ap_idle");
    sc_trace(mVcdFile, Block_proc7476_U0_ap_ready, "Block_proc7476_U0_ap_ready");
    sc_trace(mVcdFile, Block_proc7476_U0_arg_out_TDATA, "Block_proc7476_U0_arg_out_TDATA");
    sc_trace(mVcdFile, Block_proc7476_U0_arg_out_TVALID, "Block_proc7476_U0_arg_out_TVALID");
    sc_trace(mVcdFile, Block_proc7476_U0_arg_out_TLAST, "Block_proc7476_U0_arg_out_TLAST");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, this_assign_channel_dout, "this_assign_channel_dout");
    sc_trace(mVcdFile, this_assign_channel_empty_n, "this_assign_channel_empty_n");
    sc_trace(mVcdFile, arg_in0_hwstream_val_full_n, "arg_in0_hwstream_val_full_n");
    sc_trace(mVcdFile, arg_in0_hwstream_val_dout, "arg_in0_hwstream_val_dout");
    sc_trace(mVcdFile, arg_in0_hwstream_val_empty_n, "arg_in0_hwstream_val_empty_n");
    sc_trace(mVcdFile, arg_out_data_values_s_full_n, "arg_out_data_values_s_full_n");
    sc_trace(mVcdFile, arg_out_data_values_s_dout, "arg_out_data_values_s_dout");
    sc_trace(mVcdFile, arg_out_data_values_s_empty_n, "arg_out_data_values_s_empty_n");
    sc_trace(mVcdFile, arg_out_tlast_values_full_n, "arg_out_tlast_values_full_n");
    sc_trace(mVcdFile, arg_out_tlast_values_dout, "arg_out_tlast_values_dout");
    sc_trace(mVcdFile, arg_out_tlast_values_empty_n, "arg_out_tlast_values_empty_n");
    sc_trace(mVcdFile, p_0_dout, "p_0_dout");
    sc_trace(mVcdFile, p_0_empty_n, "p_0_empty_n");
    sc_trace(mVcdFile, val_assign_channel_dout, "val_assign_channel_dout");
    sc_trace(mVcdFile, val_assign_channel_empty_n, "val_assign_channel_empty_n");
    sc_trace(mVcdFile, p_s_dout, "p_s_dout");
    sc_trace(mVcdFile, p_s_empty_n, "p_s_empty_n");
    sc_trace(mVcdFile, val_assign_1_channel_dout, "val_assign_1_channel_dout");
    sc_trace(mVcdFile, val_assign_1_channel_empty_n, "val_assign_1_channel_empty_n");
    sc_trace(mVcdFile, Block_proc75_U0_start_full_n, "Block_proc75_U0_start_full_n");
    sc_trace(mVcdFile, Block_proc75_U0_start_write, "Block_proc75_U0_start_write");
    sc_trace(mVcdFile, start_for_unoptimized_conv_3_3_U0_din, "start_for_unoptimized_conv_3_3_U0_din");
    sc_trace(mVcdFile, start_for_unoptimized_conv_3_3_U0_full_n, "start_for_unoptimized_conv_3_3_U0_full_n");
    sc_trace(mVcdFile, start_for_unoptimized_conv_3_3_U0_dout, "start_for_unoptimized_conv_3_3_U0_dout");
    sc_trace(mVcdFile, start_for_unoptimized_conv_3_3_U0_empty_n, "start_for_unoptimized_conv_3_3_U0_empty_n");
    sc_trace(mVcdFile, start_for_read_1_U0_din, "start_for_read_1_U0_din");
    sc_trace(mVcdFile, start_for_read_1_U0_full_n, "start_for_read_1_U0_full_n");
    sc_trace(mVcdFile, start_for_read_1_U0_dout, "start_for_read_1_U0_dout");
    sc_trace(mVcdFile, start_for_read_1_U0_empty_n, "start_for_read_1_U0_empty_n");
    sc_trace(mVcdFile, start_for_read_U0_din, "start_for_read_U0_din");
    sc_trace(mVcdFile, start_for_read_U0_full_n, "start_for_read_U0_full_n");
    sc_trace(mVcdFile, start_for_read_U0_dout, "start_for_read_U0_dout");
    sc_trace(mVcdFile, start_for_read_U0_empty_n, "start_for_read_U0_empty_n");
    sc_trace(mVcdFile, read_1_U0_start_full_n, "read_1_U0_start_full_n");
    sc_trace(mVcdFile, read_1_U0_start_write, "read_1_U0_start_write");
    sc_trace(mVcdFile, operator_int_1_U0_start_full_n, "operator_int_1_U0_start_full_n");
    sc_trace(mVcdFile, operator_int_1_U0_start_write, "operator_int_1_U0_start_write");
    sc_trace(mVcdFile, read_U0_start_full_n, "read_U0_start_full_n");
    sc_trace(mVcdFile, read_U0_start_write, "read_U0_start_write");
    sc_trace(mVcdFile, operator_int_U0_start_full_n, "operator_int_U0_start_full_n");
    sc_trace(mVcdFile, operator_int_U0_start_write, "operator_int_U0_start_write");
    sc_trace(mVcdFile, Block_proc7476_U0_start_full_n, "Block_proc7476_U0_start_full_n");
    sc_trace(mVcdFile, Block_proc7476_U0_start_write, "Block_proc7476_U0_start_write");
#endif

    }
    mHdltvinHandle.open("unoptimized_conv_3_3_rdai.hdltvin.dat");
    mHdltvoutHandle.open("unoptimized_conv_3_3_rdai.hdltvout.dat");
}

unoptimized_conv_3_3_rdai::~unoptimized_conv_3_3_rdai() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete Block_proc75_U0;
    delete write_U0;
    delete unoptimized_conv_3_3_U0;
    delete read_1_U0;
    delete operator_int_1_U0;
    delete read_U0;
    delete operator_int_U0;
    delete Block_proc7476_U0;
    delete this_assign_channel_U;
    delete arg_in0_hwstream_val_U;
    delete arg_out_data_values_s_U;
    delete arg_out_tlast_values_U;
    delete p_0_U;
    delete val_assign_channel_U;
    delete p_s_U;
    delete val_assign_1_channel_U;
    delete start_for_unoptimdEe_U;
    delete start_for_read_1_U0_U;
    delete start_for_read_U0_U;
}

void unoptimized_conv_3_3_rdai::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void unoptimized_conv_3_3_rdai::thread_Block_proc7476_U0_ap_continue() {
    Block_proc7476_U0_ap_continue = ap_const_logic_1;
}

void unoptimized_conv_3_3_rdai::thread_Block_proc7476_U0_ap_start() {
    Block_proc7476_U0_ap_start = (val_assign_channel_empty_n.read() & val_assign_1_channel_empty_n.read());
}

void unoptimized_conv_3_3_rdai::thread_Block_proc7476_U0_start_full_n() {
    Block_proc7476_U0_start_full_n = ap_const_logic_1;
}

void unoptimized_conv_3_3_rdai::thread_Block_proc7476_U0_start_write() {
    Block_proc7476_U0_start_write = ap_const_logic_0;
}

void unoptimized_conv_3_3_rdai::thread_Block_proc75_U0_ap_continue() {
    Block_proc75_U0_ap_continue = this_assign_channel_full_n.read();
}

void unoptimized_conv_3_3_rdai::thread_Block_proc75_U0_ap_start() {
    Block_proc75_U0_ap_start = ap_const_logic_1;
}

void unoptimized_conv_3_3_rdai::thread_Block_proc75_U0_start_full_n() {
    Block_proc75_U0_start_full_n = ap_const_logic_1;
}

void unoptimized_conv_3_3_rdai::thread_Block_proc75_U0_start_write() {
    Block_proc75_U0_start_write = ap_const_logic_0;
}

void unoptimized_conv_3_3_rdai::thread_ap_channel_done_p_0() {
    ap_channel_done_p_0 = read_1_U0_ap_done.read();
}

void unoptimized_conv_3_3_rdai::thread_ap_channel_done_p_s() {
    ap_channel_done_p_s = read_U0_ap_done.read();
}

void unoptimized_conv_3_3_rdai::thread_ap_channel_done_this_assign_channel() {
    ap_channel_done_this_assign_channel = Block_proc75_U0_ap_done.read();
}

void unoptimized_conv_3_3_rdai::thread_ap_channel_done_val_assign_1_channel() {
    ap_channel_done_val_assign_1_channel = operator_int_U0_ap_done.read();
}

void unoptimized_conv_3_3_rdai::thread_ap_channel_done_val_assign_channel() {
    ap_channel_done_val_assign_channel = operator_int_1_U0_ap_done.read();
}

void unoptimized_conv_3_3_rdai::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void unoptimized_conv_3_3_rdai::thread_ap_sync_continue() {
    ap_sync_continue = ap_const_logic_0;
}

void unoptimized_conv_3_3_rdai::thread_arg_in0_TREADY() {
    arg_in0_TREADY = Block_proc75_U0_arg_in0_TREADY.read();
}

void unoptimized_conv_3_3_rdai::thread_arg_out_TDATA() {
    arg_out_TDATA = Block_proc7476_U0_arg_out_TDATA.read();
}

void unoptimized_conv_3_3_rdai::thread_arg_out_TLAST() {
    arg_out_TLAST = Block_proc7476_U0_arg_out_TLAST.read();
}

void unoptimized_conv_3_3_rdai::thread_arg_out_TVALID() {
    arg_out_TVALID = Block_proc7476_U0_arg_out_TVALID.read();
}

void unoptimized_conv_3_3_rdai::thread_operator_int_1_U0_ap_continue() {
    operator_int_1_U0_ap_continue = val_assign_channel_full_n.read();
}

void unoptimized_conv_3_3_rdai::thread_operator_int_1_U0_ap_start() {
    operator_int_1_U0_ap_start = p_0_empty_n.read();
}

void unoptimized_conv_3_3_rdai::thread_operator_int_1_U0_start_full_n() {
    operator_int_1_U0_start_full_n = ap_const_logic_1;
}

void unoptimized_conv_3_3_rdai::thread_operator_int_1_U0_start_write() {
    operator_int_1_U0_start_write = ap_const_logic_0;
}

void unoptimized_conv_3_3_rdai::thread_operator_int_U0_ap_continue() {
    operator_int_U0_ap_continue = val_assign_1_channel_full_n.read();
}

void unoptimized_conv_3_3_rdai::thread_operator_int_U0_ap_start() {
    operator_int_U0_ap_start = p_s_empty_n.read();
}

void unoptimized_conv_3_3_rdai::thread_operator_int_U0_start_full_n() {
    operator_int_U0_start_full_n = ap_const_logic_1;
}

void unoptimized_conv_3_3_rdai::thread_operator_int_U0_start_write() {
    operator_int_U0_start_write = ap_const_logic_0;
}

void unoptimized_conv_3_3_rdai::thread_read_1_U0_ap_continue() {
    read_1_U0_ap_continue = p_0_full_n.read();
}

void unoptimized_conv_3_3_rdai::thread_read_1_U0_ap_start() {
    read_1_U0_ap_start = start_for_read_1_U0_empty_n.read();
}

void unoptimized_conv_3_3_rdai::thread_read_1_U0_start_full_n() {
    read_1_U0_start_full_n = ap_const_logic_1;
}

void unoptimized_conv_3_3_rdai::thread_read_1_U0_start_write() {
    read_1_U0_start_write = ap_const_logic_0;
}

void unoptimized_conv_3_3_rdai::thread_read_U0_ap_continue() {
    read_U0_ap_continue = p_s_full_n.read();
}

void unoptimized_conv_3_3_rdai::thread_read_U0_ap_start() {
    read_U0_ap_start = start_for_read_U0_empty_n.read();
}

void unoptimized_conv_3_3_rdai::thread_read_U0_start_full_n() {
    read_U0_start_full_n = ap_const_logic_1;
}

void unoptimized_conv_3_3_rdai::thread_read_U0_start_write() {
    read_U0_start_write = ap_const_logic_0;
}

void unoptimized_conv_3_3_rdai::thread_start_for_read_1_U0_din() {
    start_for_read_1_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

void unoptimized_conv_3_3_rdai::thread_start_for_read_U0_din() {
    start_for_read_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

void unoptimized_conv_3_3_rdai::thread_start_for_unoptimized_conv_3_3_U0_din() {
    start_for_unoptimized_conv_3_3_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

void unoptimized_conv_3_3_rdai::thread_unoptimized_conv_3_3_U0_ap_continue() {
    unoptimized_conv_3_3_U0_ap_continue = ap_const_logic_1;
}

void unoptimized_conv_3_3_rdai::thread_unoptimized_conv_3_3_U0_ap_start() {
    unoptimized_conv_3_3_U0_ap_start = start_for_unoptimized_conv_3_3_U0_empty_n.read();
}

void unoptimized_conv_3_3_rdai::thread_unoptimized_conv_3_3_U0_start_full_n() {
    unoptimized_conv_3_3_U0_start_full_n = (start_for_read_1_U0_full_n.read() & start_for_read_U0_full_n.read());
}

void unoptimized_conv_3_3_rdai::thread_write_U0_ap_continue() {
    write_U0_ap_continue = ap_const_logic_1;
}

void unoptimized_conv_3_3_rdai::thread_write_U0_ap_start() {
    write_U0_ap_start = this_assign_channel_empty_n.read();
}

void unoptimized_conv_3_3_rdai::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"arg_in0_TDATA\" :  \"" << arg_in0_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"arg_in0_TLAST\" :  \"" << arg_in0_TLAST.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"arg_out_TDATA\" :  \"" << arg_out_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"arg_out_TLAST\" :  \"" << arg_out_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"arg_in0_TVALID\" :  \"" << arg_in0_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"arg_in0_TREADY\" :  \"" << arg_in0_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"arg_out_TVALID\" :  \"" << arg_out_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"arg_out_TREADY\" :  \"" << arg_out_TREADY.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

