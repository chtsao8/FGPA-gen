// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Block_proc75 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        arg_in0_TDATA,
        arg_in0_TVALID,
        arg_in0_TREADY,
        arg_in0_TLAST,
        ap_return
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] arg_in0_TDATA;
input   arg_in0_TVALID;
output   arg_in0_TREADY;
input  [0:0] arg_in0_TLAST;
output  [15:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg arg_in0_TREADY;
reg[15:0] ap_return;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    arg_in0_TDATA_blk_n;
reg    ap_block_state1;
reg   [15:0] ap_return_preg;
reg   [0:0] ap_NS_fsm;
wire    regslice_both_arg_in0_V_data_V_U_apdone_blk;
wire   [15:0] arg_in0_TDATA_int;
wire    arg_in0_TVALID_int;
reg    arg_in0_TREADY_int;
wire    regslice_both_arg_in0_V_data_V_U_ack_in;
wire    regslice_both_arg_in0_V_tlast_V_U_apdone_blk;
wire   [0:0] arg_in0_TLAST_int;
wire    regslice_both_arg_in0_V_tlast_V_U_vld_out;
wire    regslice_both_arg_in0_V_tlast_V_U_ack_in;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_return_preg = 16'd0;
end

regslice_both #(
    .DataWidth( 16 ))
regslice_both_arg_in0_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(arg_in0_TDATA),
    .vld_in(arg_in0_TVALID),
    .ack_in(regslice_both_arg_in0_V_data_V_U_ack_in),
    .data_out(arg_in0_TDATA_int),
    .vld_out(arg_in0_TVALID_int),
    .ack_out(arg_in0_TREADY_int),
    .apdone_blk(regslice_both_arg_in0_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_arg_in0_V_tlast_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(arg_in0_TLAST),
    .vld_in(arg_in0_TVALID),
    .ack_in(regslice_both_arg_in0_V_tlast_V_U_ack_in),
    .data_out(arg_in0_TLAST_int),
    .vld_out(regslice_both_arg_in0_V_tlast_V_U_vld_out),
    .ack_out(arg_in0_TREADY_int),
    .apdone_blk(regslice_both_arg_in0_V_tlast_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((arg_in0_TVALID_int == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 16'd0;
    end else begin
        if ((~((arg_in0_TVALID_int == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_preg <= arg_in0_TDATA_int;
        end
    end
end

always @ (*) begin
    if ((~((arg_in0_TVALID_int == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((arg_in0_TVALID_int == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((arg_in0_TVALID_int == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return = arg_in0_TDATA_int;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        arg_in0_TDATA_blk_n = arg_in0_TVALID_int;
    end else begin
        arg_in0_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_arg_in0_V_data_V_U_ack_in == 1'b1) & (arg_in0_TVALID == 1'b1))) begin
        arg_in0_TREADY = 1'b1;
    end else begin
        arg_in0_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((arg_in0_TVALID_int == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        arg_in0_TREADY_int = 1'b1;
    end else begin
        arg_in0_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((arg_in0_TVALID_int == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

endmodule //Block_proc75
